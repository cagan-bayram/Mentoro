// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile information
  bio           String?
  education     String?
  experience    String?
  expertise     String[]
  hourlyRate    Float?
  availability  Json?

  // Relations
  accounts      Account[]
  sessions      Session[]
  courses       Course[]    @relation("CourseCreator")
  enrollments   Enrollment[]
  reviews       Review[]
  lessons       Lesson[]    @relation("LessonTeacher")
  bookings      Booking[]   @relation("BookingStudent")
  teachingBookings Booking[] @relation("BookingTeacher")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  creator     User     @relation("CourseCreator", fields: [creatorId], references: [id])
  lessons     Lesson[]
  enrollments Enrollment[]
  reviews     Review[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float?
  duration    Int      // in minutes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String?
  course      Course?  @relation(fields: [courseId], references: [id])
  teacherId   String
  teacher     User     @relation("LessonTeacher", fields: [teacherId], references: [id])
  bookings    Booking[]
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Booking {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  status    BookingStatus @default(PENDING)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessonId  String
  studentId String
  teacherId String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   User     @relation("BookingStudent", fields: [studentId], references: [id])
  teacher   User     @relation("BookingTeacher", fields: [teacherId], references: [id])
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
} 